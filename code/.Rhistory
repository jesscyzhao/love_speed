stargazer(result$M0, type="html")
require(stargazer)
stargazer(result$M0, type="latex")
require(stargazer)
stargazer(result$M0, type="latex")
stargazer(result$M0, type="latex")
knitr::stargazer(result$M0, type="latex")
stargazer(result$M0, type="text")
$$stargazer(result$M0, type="text")$$
require(stargazer)
$$stargazer(result$M0, type="text")$$
install.packages("stargazer")
install.packages("stargazer")
knitr::opts_chunk$set(echo = TRUE)
stargazer(model)
require(stargazer)
stargazer(model)
require(stargazer)
stargazer(result$M0, type="text")
require(stargazer)
stargazer(result$M0, type="latex")
stargazer(summary(mtcar), type="html")
require(stargazer)
stargazer(summary(mtcar), type="html")
require(stargazer)
stargazer(summary(mtcars), type="html")
require(stargazer)
stargazer(mtcars, type="html")
knitr::opts_chunk$set(echo = TRUE)
stargazer(cars, type="latex")
result$M1
stargazer(result$M1, type="latex", out="M_1.tex")
important_result = list(
all_wave_complete_feature_M0 = result$M0,
all_waves_complete_feature_M1 =  result$M1,
all_waves_compelte_feature_step = step_result$M1,
all_waves_complete_feature_wave_effect_M0 =  result_wave$M0,
all_waves_complete_feature_wave_effect_M1 =  result_wave$M1,
all_waves_complete_feature_wave_effect_step =  step_result_wave$M1,
all_waves_wave_effect_only = M_wave_effect,
no_first_wave_complete_feature =  no_first_wave_result$M1,
no_first_wave_complete_feature_step =  no_first_wave_result_step$M1,
no_first_wave_complete_feature_wave_effect = no_first_result_wave$M1,
no_first_wave_complete_wave_effect_step_M0 = no_first_result_wave_step$M0,
no_first_wave_complete_feature_wave_effect_step = no_first_result_wave_step$M1
)
for (model_name in names(important_result)){
print(model_name)
this_model = model_object_list[[model_name]]
stargazer(this_model, out = paste(OUTPUT_DIC, model_name, ".tex", sep""))
}
model_name
for (model_name in names(important_result)){
print(model_name)
this_model = important_result[[model_name]]
stargazer(this_model, out = paste(OUTPUT_DIC, model_name, ".tex", sep""))
}
names(important_result)
print(model_name)
for (model_name in names(important_result)){
print(model_name)
this_model = important_result[[model_name]]
# stargazer(this_model, out = paste(OUTPUT_DIC, model_name, ".tex", sep""))
}
this_model
stargazer(this_model, out = paste(OUTPUT_DIC, model_name, ".tex", sep""))
paste(OUTPUT_DIC, model_name, ".tex", sep"")
model_name
OUTPUT_DIC
paste(OUTPUT_DIC, model_name, ".tex", sep"")
for (model_name in names(important_result)){
print(model_name)
this_model = important_result[[model_name]]
stargazer(this_model, out = paste(OUTPUT_DIC, model_name, ".tex", sep=""))
}
important_result = list(
all_wave_complete_feature_M0 = result$M0,
all_waves_complete_feature_M1 =  result$M1,
all_waves_compelte_feature_step = step_result$M1,
all_waves_complete_feature_wave_effect_M0 =  result_wave$M0,
all_waves_complete_feature_wave_effect_M1 =  result_wave$M1,
all_waves_complete_feature_wave_effect_step =  step_result_wave$M1,
all_waves_wave_effect_only = M_wave_effect,
no_first_wave_complete_feature =  no_first_wave_result$M1,
no_first_wave_complete_feature_step =  no_first_wave_result_step$M1,
no_first_wave_complete_feature_wave_effect = no_first_result_wave$M1,
no_first_wave_complete_wave_effect_step_M0 = no_first_result_wave_step$M0,
no_first_wave_complete_feature_wave_effect_step = no_first_result_wave_step$M1
)
for (model_name in names(important_result)){
print(model_name)
this_model = important_result[[model_name]]
stargazer(this_model, out = paste(OUTPUT_DIC, model_name, ".tex", sep=""))
}
require(stargazer)
stargazer(mtcars, type="text")
stargazer(result$M1, type="text", no.space = TRUE)
stargazer(result$M0, type="text", no.space = TRUE)
stargazer(result$M0, type="text", no.space = TRUE)
stargazer(result$M0, type="text", single.row = TRUE)
stargazer(result$M1, step_result$M1, type="text", single.row = TRUE)
stargazer(result$M1, step_result$M1, type="text",
covariate.labels=c("Pref. of Attractiveness","Pref. of Intelligence",
"Rate of Attractiveness","Pref. of Sincerity","Prob. of yes","Overall score", "Age", "Importance of religion", "Rate of Fun", "Date freq.", "Go out freq.", "same goal1"),
single.row = TRUE)
stargazer(result$M1, step_result$M1, type="text",
covariate.labels=c("Pref. of Attractiveness","Pref. of Intelligence",
"Rate of Attractiveness","Pref. of Sincerity","Prob. of yes","Overall score", "Age", "Importance of religion", "Rate of Fun", "Date freq.", "Go out freq.", "same goal1"),
single.row = TRUE,
out = paste(OUTPUT_DIC, "complete_feature.txt"))
important_result = list(
all_wave_complete_feature_M0 = result$M0,
all_waves_complete_feature_M1 =  result$M1,
all_waves_compelte_feature_step = step_result$M1,
all_waves_complete_feature_wave_effect_M0 =  result_wave$M0,
all_waves_complete_feature_wave_effect_M1 =  result_wave$M1,
all_waves_complete_feature_wave_effect_step =  step_result_wave$M1,
all_waves_wave_effect_only = M_wave_effect,
no_first_wave_complete_feature =  no_first_wave_result$M1,
no_first_wave_complete_feature_step =  no_first_wave_result_step$M1,
no_first_wave_complete_feature_wave_effect = no_first_result_wave$M1,
no_first_wave_complete_wave_effect_step_M0 = no_first_result_wave_step$M0,
no_first_wave_complete_feature_wave_effect_step = no_first_result_wave_step$M1
)
regression.summary.output(important_result, OUTPUT_DIC, "major_regression_summary")
regression.summary.output(important_result, OUTPUT_DIC, "major_regression_summary")
stargazer(result_wave$M1, step_result_wave$M1, type="text",
sigle.row=TRUE,
out = paste(OUTPUT_DIC, "wave_fixed_effect.txt"))
stargazer(result_wave$M1, step_result_wave$M1, type="text",
single.row=TRUE,
out = paste(OUTPUT_DIC, "wave_fixed_effect.txt"))
stargazer(no_first_result_wave$M1, no_first_result_wave_step$M1,
single.row=TRUE,
out = paste(OUTPUT_DIC, "no_wave_1_wave_fixed_effect.txt"))
stargazer(no_first_result_wave$M1, no_first_result_wave_step$M1, type="text",
single.row=TRUE,
out = paste(OUTPUT_DIC, "no_wave_1_wave_fixed_effect.txt"))
CUR_DIC = getwd()
setwd("..")
PARENT_DIC = getwd()
setwd(CUR_DIC)
DATA_DIC = paste(PARENT_DIC, "/data/", sep="")
DATA_SUB_DIC = paste(DATA_DIC, "toy_data_sum_more_wave_11_28/", sep="")
OUTPUT_DIC = paste(PARENT_DIC, "/output/sum_model_result/", sep="")
FEATURE_DATA = paste(DATA_DIC, "feature_select_ext.csv", sep="")
MODEL_DATA = paste(DATA_SUB_DIC, "TEST_SUM_MODEL.csv", sep="")
SAMPLE_DATA = paste(DATA_SUB_DIC, "TEST_SUM_SAMPLE.csv", sep="")
MODEL_FUNCTION = paste(PARENT_DIC, "/code/model_function.r", sep="")
MODEL_SCRIPT = paste(PARENT_DIC, "/code/model_script.r", sep="")
model_data = read.csv(MODEL_DATA)
sample_data = read.csv(SAMPLE_DATA)
feature_select_data = read.csv(FEATURE_DATA)
feature_select_data$raw_col
colnames(model_data)
source(MODEL_FUNCTION)
source(MODEL_SCRIPT)
stargazer(result_step$M1, step_result_wave$M1, type="text",
single.row=TRUE,
out = paste(OUTPUT_DIC, "complete_step_wave_step"))
stargazer(step_result$M1, step_result_wave$M1, type="text",
single.row=TRUE,
out = paste(OUTPUT_DIC, "complete_step_wave_step"))
CUR_DIC = getwd()
setwd("..")
PARENT_DIC = getwd()
setwd(CUR_DIC)
DATA_DIC = paste(PARENT_DIC, "/data/", sep="")
DATA_SUB_DIC = paste(DATA_DIC, "data_abs_diff_12_2/", sep="")
OUTPUT_DIC = paste(PARENT_DIC, "/output/diff_abs_model_result/", sep="")
FEATURE_DATA = paste(DATA_DIC, "feature_select_ext.csv", sep="")
MODEL_DATA = paste(DATA_SUB_DIC, "TEST_ABS_DIFF_MODEL.csv", sep="")
SAMPLE_DATA = paste(DATA_SUB_DIC, "TEST_ABS_DIFF_SAMPLE.csv", sep="")
MODEL_FUNCTION = paste(PARENT_DIC, "/code/model_function.r", sep="")
MODEL_SCRIPT = paste(PARENT_DIC, "/code/model_script.r", sep="")
model_data = read.csv(MODEL_DATA)
sample_data = read.csv(SAMPLE_DATA)
feature_select_data = read.csv(FEATURE_DATA)
source(MODEL_FUNCTION)
source(MODEL_SCRIPT)
# Output lm to a table
important_result = list(
all_wave_complete_feature_M0 = result$M0,
all_waves_complete_feature_M1 =  result$M1,
all_waves_compelte_feature_step = step_result$M1,
all_waves_complete_feature_wave_effect_M0 =  result_wave$M0,
all_waves_complete_feature_wave_effect_M1 =  result_wave$M1,
all_waves_complete_feature_wave_effect_step =  step_result_wave$M1,
all_waves_wave_effect_only = M_wave_effect,
no_first_wave_complete_feature =  no_first_wave_result$M1,
no_first_wave_complete_feature_step =  no_first_wave_result_step$M1,
no_first_wave_complete_feature_wave_effect = no_first_result_wave$M1,
no_first_wave_complete_wave_effect_step_M0 = no_first_result_wave_step$M0,
no_first_wave_complete_feature_wave_effect_step = no_first_result_wave_step$M1
)
stargazer(M_wave_effect, type="text",
single.row = TRUE,
out = paste(OUTPUT_DIC, "only_wave_efffect.txt"))
summary(step_result$M1)
install.packages("lmtest")
## Goodness of fit
require(lmtest)
lrtest(result$M1, step_result$M1)
lrtest(result$M0, result$M1)
AIC(result$M0)
AIC(result$M1)
lrtest(result$M0, step_result$M1)
lrtest(step_result$M1, step_result_wave$M1)
lrtest(no_first_result_step$M1, no_first_wave_result_step$M1)
lrtest(no_first_result$M1, no_first_wave_result_step$M1)
lrtest(no_first_wave_result_step$M1, no_first_result_wave_step$M1)
library(pscl)
install.packages("pscl")
## Goodness of fit Psudo r-squared
library(pscl)
pR2(step_result$M1)
pR2(step_result$M1$model)
pR2(matrix(step_result$M1$model))
install.packages(MKmisc)
install.packages("MKmisc")
# Hosmer-lameshow test
library(MKmisc)
HLgof.test(fit = fitted(step_result$M1), obs=model_data_reduced$match)
library(survey)
library("pROC")
install.packages("pROC")
library(pROC)
# ROC curve
step_resul_roc = roc(step_result$M1$formula, data = step_result$data)
# ROC curve
step_resul_roc = roc(step_result$M1$formula, data = model_data_reduced)
step_result$M1$formula
step_result$M1$formula
summary(step_result$M1)
step_result_wave$M1$formula
paste(step_result_wave$M1$formula)
paste(step_result_wave$M1$formula, collapse ="")
# ROC curve
step_resul_roc = roc(paste("match ~",paste(step_result$M1$formula)[3], callapse=""), data = model_data_reduced)
paste("match ~",paste(step_result$M1$formula)[3], callapse="")
# ROC curve
step_resul_roc = roc(match ~ part_lik + go_out + imprelig + part_fun + date + age_part + samegoal + pref_part_att + pref_part_int + part_att + pref_part_sin + part_prob, data = model_data_reduced)
# ROC curve
is.numeric(model_data_reduced$match)
step_resul_roc = roc(match ~ part_lik + go_out + imprelig + part_fun + date + age_part  + pref_part_att + pref_part_int + part_att + pref_part_sin + part_prob, data = model_data_reduced)
plot(step_resul_roc)
step_resul_roc
plot(step_resul_roc$pref_part_att)
plot(step_resul_roc$pref_part_att)
plot(step_resul_roc$go_out)
plot(step_resul_roc$part_lik)
# ROC curve
## No factor????
step_result_roc = roc(match ~ part_lik + go_out + imprelig + part_fun + date + age_part  + pref_part_att + pref_part_int + part_att + pref_part_sin + part_prob, data = model_data_reduced)
for (var in step_result_roc){
plot(step_result_roc[[as.character(var)]], main=var)
}
is.list(step_result_roc)
# ROC curve
## No factor????
step_result_roc = roc(match ~ part_lik + go_out + imprelig + part_fun + date + age_part  + pref_part_att + pref_part_int + part_att + pref_part_sin + part_prob, data = model_data_reduced)
for (var in names(step_result_roc)){
plot(step_result_roc[[var]], main=var)
}
# ROC curve
## No factor????
step_result_roc = roc(paste("match ~", paste(setdiff(complete_features, factor_features), sep="+")), data = model_data_reduced)
paste("match ~", paste(setdiff(complete_features, factor_features), sep="+"))
# ROC curve
## No factor????
step_result_roc = roc(paste("match ~", paste(setdiff(complete_features, factor_features), collapse = "+")), data = model_data_reduced)
paste("match ~", paste(setdiff(complete_features, factor_features), collapse = "+"))
step_result_roc = roc(match ~ pref_part_att+pref_part_sin+pref_part_int+pref_part_fun+pref_part_amb+pref_part_sha+part_att+part_sin+part_int+part_fun+part_amb+part_sha+part_lik+part_prob+age_part+imprace+imprelig+date+go_out, data = model_data_reduced)
for (var in names(step_result_roc)){
plot(step_result_roc[[var]], main=var)
}
for (var in names(step_result_roc)){
plot(step_result_roc[[var]], main=var)
}
# ROC curve
## No factor????
formula_vec = paste("match ~", paste(setdiff(complete_features, factor_features), sep = "+"))
formula_vec
# ROC curve
## No factor????
formula_vec = paste("match ~", paste(setdiff(complete_features, factor_features), sep = "+"))
for (vec in formula_vec){
plot(roc(vec, model_data_reduced), main=vec)
}
formula_vec
for (vec in formula_vec){
plot(roc(vec, data = model_data_reduced), main=vec)
}
plot(roc(match~go_out, data=model_data_reduced))
plot(roc("match~go_out", data=model_data_reduced))
plot(roc($"match~go_out", data=model_data_reduced))
plot(roc(as.formula("match~go_out"), data=model_data_reduced))
# ROC curve
## No factor????
formula_vec = paste("match ~", paste(setdiff(complete_features, factor_features), sep = "+"))
for (vec in formula_vec){
plot(roc(as.formula(vec), data = model_data_reduced), main=vec)
}
for (vec in formula_vec){
this_roc = roc(as.formula(vec), data = model_data_reduced)
plot(this_roc, main=vec)
}
for (vec in formula_vec){
this_roc = roc(as.formula(vec), data = model_data_reduced)
print(this_roc)
plot(this_roc, main=vec)
}
# Hosmer-lameshow test
library(MKmisc)
pR2(matrix(step_result$M1$model))
pR2(step_result$M1)
pR2(step_result$M1)
pR2(glm(as.formula(step_result$M1$formula), data=model_data_reduced))
step_result$M1$formula
pR2(glm(as.formula(step_result$M1$formula), data=model_data_reduced))
step_result_r_squared = pR2(glm(as.formula(step_result$M1$formula), data=model_data_reduced))
step_result_r_squared[1]
r_squared = (step_result_r_squared[1]-step_result_r_squared[2])/step_result_r_squared[2]
r_squared
r_squared = (step_result_r_squared[2]-step_result_r_squared[1])/step_result_r_squared[2]
r_squared
pR2(glm(as.formula(step_result$M1$formula), data=model_data_reduced))
step_result_wave_r_squared = pR2(glam(as.formula(step_result_wave$M1$formula), data=model_data_reduced))
step_result_wave_r_squared = pR2(glm(as.formula(step_result_wave$M1$formula), data=model_data_reduced))
step_result_wave_r_squared = pR2(glm(as.formula(step_result_wave$M1$formula), data=model_data_reduced))[3]
step_result_wave_r_squared
step_result_wave_r_squared = pR2(glm(as.formula(step_result_wave$M1$formula), data=model_data_reduced))[4]
step_result_wave_r_squared
step_result_r_squared = pR2(glm(as.formula(step_result$M1$formula), data=model_data_reduced))[4]
step_result_r_squared
no_first_result_wave_step_r_squared = pr2(glm(as.factor(no_first_result_wave_step$M1$formula), data = model_data_no_first_wave))[4]
no_first_result_wave_step_r_squared = pR2(glm(as.factor(no_first_result_wave_step$M1$formula), data = model_data_no_first_wave))[4]
no_first_result_wave_step_r_squared
glm(as.factor(no_first_result_wave_step$M1$formula), data = model_data_no_first_wave)
no_first_result_wave_step_r_squared = pR2(glm(as.formula(no_first_result_wave_step$M1$formula), data = model_data_no_first_wave))[4]
no_first_result_wave_step_r_squared
sqrt(0.6*0.4)
sqrt(0.54*0.46)
sqrt(sqrt(0.6*0.4)^2 + sqrt(0.54+0.46)^2)
sqrt(0.6*0.4)/sqrt(1000)
sqrt(0.54*0.46)/sqrt(1000)
se_1 = sqrt(0.54*0.46)/sqrt(1000)
se_2 = sqrt(0.54*0.46)/sqrt(1000)
se_1sqrt(0.6*0.4)/sqrt(1000)
se_1=sqrt(0.6*0.4)/sqrt(1000)
sqrt(se_1^2 + se_2^2)
u1 = 92/200
u2 = 183/161
u2 = 161/183
se1= sqrt(u1*(1-u1))
se2= sqrt(u2*(1-u2))
se = sqrt(se1^2+se2^2)
se
u1-u2
(u1-u2)+2se
(u1-u2)+2*se
(u1-u2)-2*se
se1
se2
se1= sqrt(u1*(1-u1))/sqrt(200)
se2 = sqrt(u2*(1-u2))/sqrt(183)
se1
se2
se = sqrt(se1^2+se2^2)
se
(u1-u2) + 2*se
(u1-u2) - 2*se
se1
se2
se
u1 = 0.483
u2 = 0.494
sd1 = (u1*(1-u1))
sd2 = (u2*(1-u2))
se1 = sd1/sqrt(592)
se2 = sd2/sqrt(154)
se = sqrt(se1^2+se2^2)
se1
se2
se
(u1-u2) + 2*se
(u1-u2) - 2*se
se1= 15.9/sqrt(592)
se2 = 17.3/sqrt(154)
se = sqrt(se1^2+se2^2)
(16.8-24.3) + 2*se
(16.8-24.3) - 2*se
se1
se2
se
16.8-24.3
## Check colineartiy
cor(model_data_reduced[, setdiff(complete_features, factor_features)])
## Check colineartiy
plot(cor(model_data_reduced[, setdiff(complete_features, factor_features)]))
pairs(model_data_reduced[, setdiff(compelte_features, factor_features)])
pairs(model_data_reduced[, setdiff(complete_features, factor_features)])
pairs(model_data_reduced[, setdiff(complete_features, factor_features)])
## Check colineartiy
all_numerical_variables = setdiff(complete_features, factor_features)
length(all_numerical_variables)
pairs(model_data_reduced[, all_numerical_variables[1:10]])
pairs(model_data_reduced[, all_numerical_variables[10:19]])
cor(model_data_reduced[, all_numerical_variables])
require(ggplot2)
require(reshape2)
num_variable_corr = cor(model_data_reduced[, all_numerical_variables])
melted_corr = melt(num_variable_corr)
ggplot(data = melted_corr, aes(x = Var1, y = Var2, fill=value)) + geom_tile() + scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1,1))
ggplot(data = melted_corr, aes(x = Var1, y = Var2, fill=value)) + geom_tile() + scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1,1))+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
melted_corr
ggplot(data = melted_corr, aes(x = Var1, y = Var2, fill=value)) + geom_tile() + scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1,1))+ theme(axis.title.x=element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = melted_corr, aes(x = Var1, y = Var2, fill=value)) + geom_tile() + scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1,1))+ theme(axis.title.x=element_blank(),axis.title.y=element_blank(), axis.text.x = element_text(angle = 90, hjust = 1), )
ggplot(data = melted_corr, aes(x = Var1, y = Var2, fill=value)) + geom_tile() + scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1,1))+ theme(axis.title.x=element_blank(),axis.title.y=element_blank(), axis.text.x = element_text(angle = 80, hjust = 1), )
ggplot(data = melted_corr, aes(x = Var1, y = Var2, fill=value)) + geom_tile() + scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1,1))+ theme(axis.title.x=element_blank(),axis.title.y=element_blank(), axis.text.x = element_text(angle = 50, hjust = 1), )
ggplot(data = melted_corr, aes(x = Var1, y = Var2, fill=value)) + geom_tile() + scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1,1))+ theme(axis.title.x=element_blank(),axis.title.y=element_blank(), axis.text.x = element_text(angle = 30, hjust = 1), )
complete_features
HLgof.test(fit = fitted(step_result$M1), obs=model_data_reduced$match)
head(model_data_reduced)
HLgof.test(fit = fitted(step_result$M1), obs=model_data_reduced$match)
HLTest
a = HLgof.test(fit = fitted(step_result$M1), obs=model_data_reduced$match)
a$H
a$H$p.value
a$H$method
HL_list = c(step_result$M1, step_result_wave$M1, no_first_wave_result_step$M1, no_first_wave_result_step$M1)
step_result_test = HLgof.test(fit = fitted(step_result$M1), obs=model_data_reduced$match)
step_result_wave_test = HLgof.test(fit = fitted(step_result_wave$M1), obs=model_data_reduced$match)
no_first_result_step_test = HLgof.test(fit = fitted(no_first_wave_result_step$M1), obs=model_data_no_first_wave$match)
no_first_result_wave_step_test = HLgof.test(fit = fitted(no_first_result_wave_step$M1), obs=model_data_no_first_wave$match)
p_values = c(step_result_test$H$p.value, step_result_wave_test$H$p.value, no_first_result_step_test$H$p.value, no_first_result_wave_step_test$H$p.value)
p_values
HL_output = cbind(c("All variables", "All variables with wave", "No first wave all variables", "No first wave all variables with wave"), p_values)
HL_output
p_values
HL_output = cbind(c("All variables", "All variables with wave", "No first wave all variables", "No first wave all variables with wave"), t(p_values))
# ROC curve
## No factor????
formula_vec = paste("match ~", paste(setdiff(complete_features, factor_features), sep = "+"))
HL_output
HL_output = rbind(c("All variables", "All variables with wave", "No first wave all variables", "No first wave all variables with wave"), p_values)
HL_output
p_values
as.vector(p_values)
HL_output = rbind(c("All variables", "All variables with wave", "No first wave all variables", "No first wave all variables with wave"), as.vector(p_values))
HL_output
HL_output = cbind(c("All variables", "All variables with wave", "No first wave all variables", "No first wave all variables with wave"), as.vector(p_values))
HL_output
HL_output[,1]
p_values
require(ggplot2)
require(ggthemes)
CUR_DIC = getwd()
setwd("..")
PARENT_DIC = getwd()
setwd(CUR_DIC)
DATA_DIC = paste(PARENT_DIC, "/data/", sep="")
DATA_SUB_DIC = paste(DATA_DIC, "toy_data_11_25/", sep="")
OUTPUT_DIC = paste(PARENT_DIC, "output/test_toy_data_11_25", sep="")
FEATURE_DATA = paste(DATA_DIC, "feature_select.csv", sep="")
MODEL_DATA = paste(DATA_SUB_DIC, "TEST_MODEL.csv", sep="")
SAMPLE_DATA = paste(DATA_SUB_DIC, "TEST_SAMPLE.csv", sep="")
model_data = read.csv(MODEL_DATA)
sample_data = read.csv(SAMPLE_DATA)
feature_select_data = read.csv(FEATURE_DATA)
require(ggplot2)
require(ggthemes)
CUR_DIC = getwd()
setwd("..")
PARENT_DIC = getwd()
setwd(CUR_DIC)
DATA_DIC = paste(PARENT_DIC, "/data/", sep="")
DATA_SUB_DIC = paste(DATA_DIC, "data_abs_diff_12_2/", sep="")
# OUTPUT_DIC = paste(PARENT_DIC, "output/test_toy_data_11_25", sep="")
FEATURE_DATA = paste(DATA_DIC, "feature_select_ext.csv", sep="")
MODEL_DATA = paste(DATA_SUB_DIC, "TEST_ABS_DIFF_MODEL.csv", sep="")
SAMPLE_DATA = paste(DATA_SUB_DIC, "TEST_ABS_DIFF_SAMPLE.csv", sep="")
model_data = read.csv(MODEL_DATA)
sample_data = read.csv(SAMPLE_DATA)
feature_select_data = read.csv(FEATURE_DATA)
individual_feature = as.character(feature_select_data[which(feature_select_data$ind==1),"new_col"])
pair_wise_feature = as.character(feature_select_data[which(feature_select_data$pair==1), "new_col"])
individual.feature.plot = function(sample_data, feature_list, output_dic, individual_feature){
attach(sample_data)
agg_by_mean = aggregate(sample_data[, c("gender", "age_self")], by = list(iid), FUN=mean, na.rm=FALSE)
agg_by_count = aggregate(sample_data[, c("match", "samerace")], by = list(iid), FUN=sum, na.rm=FALSE)
detach(sample_data)
ind_group_by_data = merge(agg_by_mean, agg_by_count, by = "Group.1")
# age, gender, match, race
p = list()
for (feature in colnames(ind_group_by_data)){
print(feature)
# p[[feature]] = as.data.frame(table(ind_group_by_data[, feature]))
p[[feature]] = ggplot(data=as.data.frame(table(ind_group_by_data[, feature])), aes(x=Var1, y=Freq)) +
geom_bar(stat="identity", fill="steelblue") + labs(x=as.character(feature)) + theme_economist() + geom_text(aes(label=Freq), vjust=1.6, color="white", size=4)
print(p[[feature]])
}
## Individual rating difference
ggplot(data=data.frame(cbind(att_rate = sample_data$part_att, id = as.factor(sample_data[, "pid"]))), aes(x = as.factor(id), y=att_rate)) + geom_boxplot()
}
pair.wise.feature.plot = function(model_data, output_list, pair_wise_feature){
q = list()
for (feature in pair_wise_feature[3:length(pair_wise_feature)]){
q[[feature]]=ggplot(data = data.frame(cbind(feature = model_data[, feature]), wave = as.factor(model_data[, "wave.iid"])), aes(x = wave, y = feature)) + geom_boxplot() + labs(y=feature) + theme_economist()
print(q[[feature]])
}
}
