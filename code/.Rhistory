all_vars = colnames(model_data)
all_features = all_vars[which(!(all_vars %in% c("match.iid", "match.pid", "samerace.iid", "gender.iid", "gender.pid", "wave.pid") ))]
individual_feature = as.character(feature_select_data[which(feature_select_data$ind==1),"new_col"])
pair_wise_feature = as.character(feature_select_data[which(feature_select_data$pair==1), "new_col"])
pair_wise_feature = c(pair_wise_feature[3:length(pair_wise_feature)], "samegoal", "samecareer", "samefield")
pref_features = all_features[grep("pref_", all_features)]
rate_features = all_features[grep("part_", all_features)]
rate_features = rate_features[grep("pref_", rate_features, invert=T)]
rate_features = rate_features[which(!(rate_features %in% c("part_met.iid", "part_met.pid",  "dec_part.iid", "dec_part.pid")))]
individual_diff_features = c("age_part", "imprace", "imprelig", "date", "go_out", "samegoal", "samecareer", "samefield", "samerace.pid")
result=auto.fit.and.model.compare(model_data_reduced, pair_wise_feature, factor_features)
result$m0_sig_features
result$m1_sig_features
summary(result$M1)
pref_features = all_features[grep("pref_", all_features)]
rate_features = all_features[grep("part_", all_features)]
rate_features = rate_features[grep("pref_", rate_features, invert=T)]
rate_features = rate_features[which(!(rate_features %in% c("part_met.iid", "part_met.pid",  "dec_part.iid", "dec_part.pid")))]
individual_diff_features = c("age_part", "imprace", "imprelig", "date", "go_out", "samegoal", "samecareer", "samefield", "samerace.pid")
complete_features = c(pref_features, rate_features, individual_diff_features)
result=auto.fit.and.model.compare(model_data_reduced, complete_features, factor_features)
result$m0_sig_features
result$m1_sig_features
# With individual effect
result = auto.fit.and.model.compare(model_data_reduced, c(complete_features, "iid", "pid"), factor_features)
# With wave effect
result_wave = auto.fit.and.model.compare(model_data_reduced, c(complete_features, "wave.iid"))
result_wave$m0_sig_features
result_wave$m1_sig_features
summary(result_wave$M0)
# With wave effect
result_wave = auto.fit.and.model.compare(model_data_reduced, c(complete_features, "wave.iid"))
### Individual fixed effect makes all the preference NA. Not linearly independent
M_wave_effect = fit.with.these.features(model_data_reduced, c("wave.iid"))
summary(M_wave_effect)
## Let's get rid of first wave and see
model_data_no_first_wave = model_data_reduced[which(model_data_reduced$wave.iid!=1), ]
M_no_first_wave = fit.with.these.features(model_data_no_first_wave, c("wave.iid"))
summar(M_no_first_wave)
summary(M_no_first_wave)
pref_result = auto.fit.and.model.compare(model_data_no_first_wave, pref_features, factor_features)
rate_result = auto.fit.and.model.compare(model_data_no_first_wave, rate_features, factor_features)
ind_diff_result = auto.fit.and.model.compare(model_data_no_first_wave, individual_diff_features, factor_features)
propose_features = clean.up.sigificant.feature(c(pref_result$m1_sig_features, rate_result$m1_sig_features, ind_diff_result$m1_sig_features), factor_features)
propose_features_ind_effect = c(propose_features,  "iid", "pid")
M_1 = fit.with.these.features(model_data_no_first_wave, propose_features)
print(summary(M_1))
M_2 = fit.with.these.features(model_data_no_first_wave, propose_features_ind_effect)
print(summary(M_2))
# anova(M_1, M_2, test="F")
AIC(M_1)
AIC(M_2)
feature_list = list(pref = pref_features, rate = rate_features, ind_diff = individual_diff_features)
by_wave_result = list()
model_data_reduced_by_wave = split(model_data_reduced, model_data_reduced$wave.iid)
for (wave in names(model_data_reduced_by_wave)){
print(wave)
model_data_this_wave = model_data_reduced_by_wave[[as.character(wave)]]
this_wave_result = list()
for (feature_type in names(feature_list)){
print(feature_type)
feature_to_fit = if(wave==16 & feature_type == "ind_diff") setdiff(feature_list[[as.character(feature_type)]], c("samecareer", "samefield")) else feature_list[[as.character(feature_type)]]
this_wave_result[[as.character(feature_type)]] = auto.fit.and.model.compare(model_data_this_wave, feature_to_fit)
}
this_wave_proposed_feature = clean.up.sigificant.feature(unlist(lapply(this_wave_result, function(x){x$m1_sig_features})))
final_result = auto.fit.and.model.compare(model_data_this_wave, this_wave_proposed_feature)
print("proposed feature")
print (final_result$m1_sig_features)
this_wave_result[["final_result"]] = final_result
by_wave_result[[as.character(wave)]] = this_wave_result
}
warnings()
## Let's get rid of first wave and see
model_data_no_first_wave = model_data_reduced[which(model_data_reduced$wave.iid!=1), ]
M_no_first_wave = fit.with.these.features(model_data_no_first_wave, c("wave.iid"))
summary(M_no_first_wave)
# No individual effect
result=auto.fit.and.model.compare(model_data_no_first_wave, complete_features, factor_features)
# With individual effect
result_ind = auto.fit.and.model.compare(model_data_no_first_wave, c(complete_features, "iid", "pid"), factor_features)
# With wave effect
result_wave = auto.fit.and.model.compare(model_data_no_first_wave, c(complete_features, "wave.iid"))
# No individual effect
no_first_wave_result=auto.fit.and.model.compare(model_data_no_first_wave, complete_features, factor_features)
# With individual effect
no_first_wave_result_ind = auto.fit.and.model.compare(model_data_no_first_wave, c(complete_features, "iid", "pid"), factor_features)
# With wave effect
no_first_result_wave = auto.fit.and.model.compare(model_data_no_first_wave, c(complete_features, "wave.iid"))
no_first_result_wave$m1_sig_features
pref_result = auto.fit.and.model.compare(model_data_no_first_wave, pref_features, factor_features)
rate_result = auto.fit.and.model.compare(model_data_no_first_wave, rate_features, factor_features)
ind_diff_result = auto.fit.and.model.compare(model_data_no_first_wave, individual_diff_features, factor_features)
propose_features = clean.up.sigificant.feature(c(pref_result$m1_sig_features, rate_result$m1_sig_features, ind_diff_result$m1_sig_features), factor_features)
propose_features
no_first_result_wave$m1_sig_features
M_1 = fit.with.these.features(model_data_no_first_wave, propose_features)
extract.significant.feature(M_1)
propose_features = clean.up.sigificant.feature(no_first_result_wave$m1_sig_features, factor_features)
propose_features
M_1 = fit.with.these.features(model_data_no_first_wave, propose_features)
M_2 = fit.with.these.features(model_data_no_first_wave, propose_features_ind_effect)
print(summary(M_1))
print(summary(M_2))
for (wave in names(model_data_reduced_by_wave)){
print(wave)
model_data_this_wave = model_data_reduced_by_wave[[as.character(wave)]]
this_wave_result = list()
feature_to_fit = if(wave==16 & feature_type == "ind_diff") setdiff(complete_features, c("samecareer", "samefield")) else complete_features
this_wave_result = auto.fit.and.model.compare(model_data_this_wave, complete_features, factor_features)
this_wave_proposed_feature = clean.up.sigificant.feature(this_wave_result$m1_sig_features)
final_result = auto.fit.and.model.compare(model_data_this_wave, this_wave_proposed_feature)
print("proposed feature")
print (final_result$m1_sig_features)
by_wave_result[[as.character(wave)]] = final_result
}
feature_to_fit
for (wave in names(model_data_reduced_by_wave)){
print(wave)
model_data_this_wave = model_data_reduced_by_wave[[as.character(wave)]]
this_wave_result = list()
feature_to_fit = if(wave==16 & feature_type == "ind_diff") setdiff(complete_features, c("samecareer", "samefield")) else complete_features
this_wave_result = auto.fit.and.model.compare(model_data_this_wave, feature_to_fit, factor_features)
this_wave_proposed_feature = clean.up.sigificant.feature(this_wave_result$m1_sig_features)
final_result = auto.fit.and.model.compare(model_data_this_wave, this_wave_proposed_feature)
print("proposed feature")
print (final_result$m1_sig_features)
by_wave_result[[as.character(wave)]] = final_result
}
for (wave in names(model_data_reduced_by_wave)){
print(wave)
model_data_this_wave = model_data_reduced_by_wave[[as.character(wave)]]
this_wave_result = list()
feature_to_fit = if(wave==16 & feature_type == "ind_diff") setdiff(complete_features, c("samecareer", "samefield")) else complete_features
this_wave_result = auto.fit.and.model.compare(model_data_this_wave, feature_to_fit, factor_features)
this_wave_proposed_feature = clean.up.sigificant.feature(this_wave_result$m1_sig_features)
final_result = auto.fit.and.model.compare(model_data_this_wave, this_wave_proposed_feature)
print("proposed feature")
print (final_result$m1_sig_features)
by_wave_result[[as.character(wave)]] = final_result
}
for (wave in names(model_data_reduced_by_wave)){
print(wave)
model_data_this_wave = model_data_reduced_by_wave[[as.character(wave)]]
this_wave_result = list()
feature_to_fit = if(wave==16 & feature_type == "ind_diff") setdiff(complete_features, c("samecareer", "samefield")) else complete_features
this_wave_result = auto.fit.and.model.compare(model_data_this_wave, feature_to_fit, factor_features)
this_wave_proposed_feature = clean.up.sigificant.feature(this_wave_result$m1_sig_features)
final_result = auto.fit.and.model.compare(model_data_this_wave, this_wave_proposed_feature)
print("proposed feature")
print (final_result$m1_sig_features)
by_wave_result[[as.character(wave)]] = final_result
}
by_wave_result[["1"]]
summar(by_wave_result[["1"]]$M0)
summary(by_wave_result[["1"]]$M0)
for (wave in names(model_data_reduced_by_wave)){
print(wave)
model_data_this_wave = model_data_reduced_by_wave[[as.character(wave)]]
this_wave_result = list()
feature_to_fit = if(wave==16) setdiff(complete_features, c("samecareer", "samefield")) else complete_features
this_wave_result = auto.fit.and.model.compare(model_data_this_wave, feature_to_fit, factor_features)
this_wave_proposed_feature = clean.up.sigificant.feature(this_wave_result$m1_sig_features)
final_result = auto.fit.and.model.compare(model_data_this_wave, this_wave_proposed_feature)
print("proposed feature")
print (final_result$m1_sig_features)
by_wave_result[[as.character(wave)]] = final_result
}
wave = 1
model_data_this_wave = model_data_reduced_by_wave[[as.character(wave)]]
this_wave_result = list()
feature_to_fit = if(wave==16) setdiff(complete_features, c("samecareer", "samefield")) else complete_features
feature_to_fit
fit.with.these.features(model_data_this_wave, feature_to_fit, factor_features)
fit.with.these.features(model_data_this_wave, feature_to_fit)
for (wave in names(model_data_reduced_by_wave)){
print(wave)
model_data_this_wave = model_data_reduced_by_wave[[as.character(wave)]]
this_wave_result = list()
for (feature_type in names(feature_list)){
print(feature_type)
feature_to_fit = if(wave==16 & feature_type == "ind_diff") setdiff(feature_list[[as.character(feature_type)]], c("samecareer", "samefield")) else feature_list[[as.character(feature_type)]]
this_wave_result[[as.character(feature_type)]] = auto.fit.and.model.compare(model_data_this_wave, feature_to_fit)
}
this_wave_proposed_feature = clean.up.sigificant.feature(unlist(lapply(this_wave_result, function(x){x$m1_sig_features})))
final_result = auto.fit.and.model.compare(model_data_this_wave, this_wave_proposed_feature)
print("proposed feature")
print (final_result$m1_sig_features)
this_wave_result[["final_result"]] = final_result
by_wave_result[[as.character(wave)]] = this_wave_result
}
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/sum_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/sum_model.R')
by_wave_result = list()
model_data_reduced_by_wave = split(model_data_reduced, model_data_reduced$wave.iid)
for (wave in names(model_data_reduced_by_wave)){
print(wave)
model_data_this_wave = model_data_reduced_by_wave[[as.character(wave)]]
this_wave_result = list()
for (feature_type in names(feature_list)){
print(feature_type)
feature_to_fit = if(wave==16 & feature_type == "ind_diff") setdiff(feature_list[[as.character(feature_type)]], c("samecareer", "samefield")) else feature_list[[as.character(feature_type)]]
this_wave_result[[as.character(feature_type)]] = auto.fit.and.model.compare(model_data_this_wave, feature_to_fit)
}
this_wave_proposed_feature = clean.up.sigificant.feature(unlist(lapply(this_wave_result, function(x){x$m1_sig_features})))
final_result = auto.fit.and.model.compare(model_data_this_wave, this_wave_proposed_feature)
print("proposed feature")
print (final_result$m1_sig_features)
this_wave_result[["final_result"]] = final_result
by_wave_result[[as.character(wave)]] = this_wave_result
}
feature_list = list(pref = pref_features, rate = rate_features, ind_diff= individual_diff_features)
by_wave_result = list()
model_data_reduced_by_wave = split(model_data_reduced, model_data_reduced$wave.iid)
for (wave in names(model_data_reduced_by_wave)){
print(wave)
model_data_this_wave = model_data_reduced_by_wave[[as.character(wave)]]
this_wave_result = list()
for (feature_type in names(feature_list)){
print(feature_type)
feature_to_fit = if(wave==16 & feature_type == "ind_diff") setdiff(feature_list[[as.character(feature_type)]], c("samecareer", "samefield")) else feature_list[[as.character(feature_type)]]
this_wave_result[[as.character(feature_type)]] = auto.fit.and.model.compare(model_data_this_wave, feature_to_fit)
}
this_wave_proposed_feature = clean.up.sigificant.feature(unlist(lapply(this_wave_result, function(x){x$m1_sig_features})))
final_result = auto.fit.and.model.compare(model_data_this_wave, this_wave_proposed_feature)
print("proposed feature")
print (final_result$m1_sig_features)
this_wave_result[["final_result"]] = final_result
by_wave_result[[as.character(wave)]] = this_wave_result
}
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/sum_model.R')
warnings
warnings()
result_wave$compare
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/sum_model.R')
result_wave$compare
anova(result_wave$M_1)
result_wave$M_1
result_wave$M1
anova(result_wave$M1)
anova(result_wave$M0)
anova(result_wave$M0)
anova(result_wave$M0, test="Chisq")
anova(result_wave$M1, test="Chisq")
anova(result_wave$M0, test="Chisq")
coef(anova(result_wave$M0, test="Chisq"))
t = anova(result_wave$M0, test="Chisq")
t$`Pr(>Chi)`
names(t)
rownames(t)
rownames(t)[which(t$`Pr(>Chi)`)<0.05]
rownames(t)[which(t$`Pr(>Chi)`<0.05)]
rownames(t)[which(t$`Pr(>Chi)`<0.05)] %in% result_wave$m1_sig_features
result_wave$m1_sig_features %in%  rownames(t)[which(t$`Pr(>Chi)`<0.05)]
anova_sig_features =  rownames(t)[which(t$`Pr(>Chi)`<0.05)]
setdiff(anova_sig_features, result_wave$m1_sig_features)
setdiff(result_wave$m1_sig_features, anova_sig_features)
anova(result_wave$M1, result_wave$M0, test="LRT")
anova(result_wave$M0, result_wave$M1, test="LRT")
anova(result_wave$M1, result_wave$M0, test="LRT")
M0 = result_wave$M0
M1 = fit.with.these.features(model_data_reduced, anova_sig_features)
anova(M0, M1, test="LRT")
anova(M1, M0, test="LRT")
step(M0)
stepAIC(M0)
drop1(M0)
s1 = drop1(M0)
s1$AIC
step(M0)
model.null = glm(match.iid ~ 1,
data=model_data_reduced,
family = binomial(link="logit")
)
model.full = fit.with.these.features(model_data_reduced, complete_features)
step(model.null, scope=list(upper=model.full), direction="both", test="Chisq", data = model_data_reduced)
final_model = step(model.null, scope=list(upper=model.full), direction="both", test="Chisq", data = model_data_reduced)
final_model$formula
final_model$model
anova(final_model, model.full, test="LRT")
result_wave$m1_sig_features
final_model$formula
final_model$anova
summary(final_model)
extract.significant.feature(model.full)
final_model$formula
AIC(final_model)
result_wave$m1_sig_features
model.full$formula
result$m0_sig_features
final_model$formula
M_0 = fit.with.these.features(model_data_reduced, complete_features, factor_features)
M_0 = fit.with.these.features(model_data_reduced, complete_features)
M_0 = fit.with.these.features(model_data_reduced, c("1"))
M_full = fit.with.these.features(model_data_reduced, complete_features)
M_null = fit.with.these.features(model_data_reduced, c("1"))
step(M_null, scope=list(upper=M_full), direction="both", test="Chisq", data = model_data_reduced)
M_full = fit.with.these.features(model_data_reduced, complete_features)
M_null = fit.with.these.features(model_data_reduced, c("1"))
step(M_null, scope=list(upper=M_full), direction="both", test="Chisq", data = model_data_reduced)
M_full = fit.with.these.features(model_data, features)
M_null = fit.with.these.features(model_data, c("1"))
M1 = step(M_null, scope=list(upper=M_full), direction="both", test="Chisq", data = model_data)
step(M_null, scope=list(upper=M_full), direction="both", test="Chisq", data = model_data_reduced)
step(M_null, scope=list(upper=M_full), direction="both", test="Chisq", data = model_data_reduced)
final_model = step(model.null, scope=list(upper=model.full), direction="both", test="Chisq", data = model_data_reduced)
model.null
M_null
model.null$formula
model.null
M_full = fit.with.these.features(model_data_reduced, complete_features)
M_null =  glm(formula = match.iid ~ 1, family = binomial(link = "logit"),
data = model_data_reduced)
step(M_null, scope=list(upper=M_full), direction="both", test="Chisq", data = model_data_reduced)
M_final = step(M_null, scope=list(upper=M_full), direction="both", test="Chisq", data = model_data_reduced)
result$m0_sig_features
result$m1_sig_features
clean.up.sigificant.feature(result$m1_sig_features)
result$m0_sig_features
clean.up.sigificant.feature(result$m1_sig_features)
M_final$formula
AIC(result$M0)
AIC(result$M1)
AIC(M_final)
M_final = step(M_null, scope=list(upper=M_full), direction="both", test="Chisq", data = model_data_reduced, trace=0)
result$m0_sig_features
clean.up.sigificant.feature(result$m1_sig_features)
M_final$formula
AIC(result$M0)
AIC(result$M1)
AIC(M_final)
source(MODEL_FUNCTION)
source(MODEL_FUNCTION)
# No individual effect
result=auto.fit.and.model.compare(model_data_reduced, complete_features, factor_features)
result$m0_sig_features
source(MODEL_FUNCTION)
M_final = auto.fit.and.step.select(model_data_reduced, complete_features, factor_features)
M_final = auto.fit.and.step.select(model_data_reduced, complete_features, factor_features)
M_full
M_null = glm("match.iid ~ 1", data = model_data, family = binomial(link="logit"))
M1 = step(M_null, scope=list(upper=M_full), direction="both", test="Chisq", data = model_data, trace=0)
M_null = glm(match.iid ~ 1, data = model_data, family = binomial(link="logit"))
M1 = step(M_null, scope=list(upper=M_full), direction="both", test="Chisq", data = model_data, trace=0)
M1
source(MODEL_FUNCTION)
source(MODEL_FUNCTION)
M_final = auto.fit.and.step.select(model_data_reduced, complete_features, factor_features)
source(MODEL_FUNCTION)
M_final = auto.fit.and.step.select(model_data_reduced, complete_features, factor_features)
result$m0_sig_features
clean.up.sigificant.feature(result$m1_sig_features)
M_final$formula
step_result = auto.fit.and.step.select(model_data_reduced, complete_features, factor_features)
step_result = auto.fit.and.step.select(model_data_reduced, complete_features, factor_features)
clean.up.sigificant.feature(step_result$m1_sig_features)
clean.up.sigificant.feature(result$m1_sig_features)
AIC(result$M0)
AIC(result$M1)
AIC(step_result$M1)
clean.up.sigificant.feature(step_result$m1_sig_features)
clean.up.sigificant.feature(result$m1_sig_features)
step_result = auto.fit.and.step.select(model_data_reduced, complete_features, factor_features)
result$m0_sig_features
clean.up.sigificant.feature(result$m1_sig_features)
clean.up.sigificant.feature(step_result$m1_sig_features)
AIC(result$M0)
AIC(result$M1)
AIC(step_result$M1)
step_result$M1$formula
step_result = auto.fit.and.step.select(model_data_reduced, complete_features, factor_features)
summary(M1)
extract.significant.feature(M1)
summary(M1)
# With wave effect
result_wave = auto.fit.and.model.compare(model_data_reduced, c(complete_features, "wave.iid"))
step_result_wave = auto.fit.and.step.select(model_data_reduced, c(complete_features, "wave.iid"))
# With wave effect
result_wave = auto.fit.and.model.compare(model_data_reduced, c(complete_features, "wave.iid"))
step_result_wave = auto.fit.and.step.select(model_data_reduced, c(complete_features, "wave.iid"))
result_wave$m1_sig_features
step_result_wave$m1_sig_features
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/sum_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/difference_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/difference_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/difference_model.R')
CUR_DIC = getwd()
setwd("..")
PARENT_DIC = getwd()
setwd(CUR_DIC)
DATA_DIC = paste(PARENT_DIC, "/data/", sep="")
DATA_SUB_DIC = paste(DATA_DIC, "toy_data_ext_more_wave_11_28/", sep="")
FEATURE_DATA = paste(DATA_DIC, "feature_select_ext.csv", sep="")
MODEL_DATA = paste(DATA_SUB_DIC, "TEST_EXT_MODEL.csv", sep="")
SAMPLE_DATA = paste(DATA_SUB_DIC, "TEST_EXT_SAMPLE.csv", sep="")
MODEL_FUNCTION = paste(PARENT_DIC, "/code/model_function.r", sep="")
MODEL_SCRIPT = paste(PARENT_DIC, "/code/model_script.r", sep="")
model_data = read.csv(MODEL_DATA)
sample_data = read.csv(SAMPLE_DATA)
feature_select_data = read.csv(FEATURE_DATA)
CUR_DIC = getwd()
setwd("..")
PARENT_DIC = getwd()
setwd(CUR_DIC)
DATA_DIC = paste(PARENT_DIC, "/data/", sep="")
DATA_SUB_DIC = paste(DATA_DIC, "toy_data_ext_more_wave_11_28/", sep="")
FEATURE_DATA = paste(DATA_DIC, "feature_select_ext.csv", sep="")
MODEL_DATA = paste(DATA_SUB_DIC, "TEST_EXT_MODEL.csv", sep="")
SAMPLE_DATA = paste(DATA_SUB_DIC, "TEST_EXT_SAMPLE.csv", sep="")
MODEL_FUNCTION = paste(PARENT_DIC, "/code/model_function.r", sep="")
MODEL_SCRIPT = paste(PARENT_DIC, "/code/model_script.r", sep="")
model_data = read.csv(MODEL_DATA)
sample_data = read.csv(SAMPLE_DATA)
feature_select_data = read.csv(FEATURE_DATA)
FACTOR_FEATURES = c("iid", "pid", "samerace.pid", "wave.iid", "part_met.pid", "samegoal", "samecareer", "samefield")
source(MODEL_FUNCTION)
########################################Data prep###############################################################
model_data = model_data[which(model_data$part_met.pid!=3), ]
factor_features = FACTOR_FEATURES
model_data_reduced  = model_data[complete.cases(model_data), ]
model_data_reduced$samegoal = as.factor(sapply(model_data_reduced$goal.iid - model_data_reduced$goal.pid, function(x){if(x==0) 1 else 0}))
model_data_reduced$samecareer = as.factor(sapply(model_data_reduced$career_c.iid- model_data_reduced$career_c.pid, function(x){if(x==0) 1 else 0}))
model_data_reduced$samefield = as.factor(sapply(model_data_reduced$field_cd.iid- model_data_reduced$field_cd.pid, function(x){if(x==0) 1 else 0}))
model_data_reduced = model_data_reduced[complete.cases(model_data_reduced),]
for (feature in factor_features){
model_data_reduced[, feature] = as.factor(model_data_reduced[, feature])
}
###############################################################################################################
all_vars = colnames(model_data)
all_features = all_vars[which(!(all_vars %in% c("match.iid", "match.pid", "samerace.iid", "gender.iid", "gender.pid", "wave.pid") ))]
individual_feature = as.character(feature_select_data[which(feature_select_data$ind==1),"new_col"])
pair_wise_feature = as.character(feature_select_data[which(feature_select_data$pair==1), "new_col"])
pair_wise_feature = c(pair_wise_feature[3:length(pair_wise_feature)], "samegoal", "samecareer", "samefield")
pref_features = all_features[grep("pref_", all_features)]
rate_features = all_features[grep("part_", all_features)]
rate_features = rate_features[grep("pref_", rate_features, invert=T)]
rate_features = rate_features[which(!(rate_features %in% c("part_met.iid", "part_met.pid",  "dec_part.iid", "dec_part.pid")))]
individual_diff_features = c("age_part", "imprace", "imprelig", "date", "go_out", "samegoal", "samecareer", "samefield", "samerace.pid")
complete_features = c(pref_features, rate_features, individual_diff_features)
complete_features
# With wave effect
result_wave = auto.fit.and.model.compare(model_data_reduced, c(complete_features, "wave.iid"))
step_result_wave = auto.fit.and.step.select(model_data_reduced, c(complete_features, "wave.iid"))
step_result_wave$m0_sig_features
step_result_wave$m1_sig_features
result_wave$m0_sig_features
result_wave$m1_sig_features
extract.significant.feature(result_wave$M1)
result_wave$M1$formula
clean.up.sigificant.feature(wave_result$m0_sig_features)
clean.up.sigificant.feature(result_wave$m0_sig_features)
result_wave$m0_sig_features
factor_features
feature_reduced = sig_feature[grep(paste(c(factor_features, "(Intercept)"), collapse = "|"), sig_feature, invert=T)]
sig_feature = result_wave$m0_sig_features
feature_reduced = sig_feature[grep(paste(c(factor_features, "(Intercept)"), collapse = "|"), sig_feature, invert=T)]
feature_reduced
model_data_no_na  = model_data[complete.cases(model_data), ]
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/difference_model.R')
pair_wise_feature
head(model_data_reduced)
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/difference_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/difference_model.R')
head(model_data_reduced)
colnames(model_data_reduced)
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/difference_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/difference_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/difference_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/difference_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/difference_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/sum_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/back_up_difference_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/back_up_difference_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/back_up_difference_model.R')
wave_proportion = wave_dates/wave_size
## Looking from sample data
sample_data$wave = as.factor(sample_data$wave)
sample_data$iid = as.factor(sample_data$iid)
ind_dates = aggregate(sample_data$dec_part, by=list(sample_data$iid), sum)
ind_dates_with_wave = cbind(sample_data[!duplicated(sample_data$iid), c("iid", "wave")], dates = ind_dates[, "x"])
L = lm(dates~wave, data=data.frame(ind_dates_with_wave))
M = aov(dates~wave, data = data.frame(ind_dates_with_wave))
TukeyHSD(M)
wave_size = unlist(lapply(split(ind_dates_with_wave, ind_dates_with_wave$wave), function(x){length(unique(x$iid))}))
wave_dates = unlist(lapply(split(ind_dates_with_wave, ind_dates_with_wave$wave), function(x){sum(x$dates)}))
wave_proportion = wave_dates/wave_size
## Looking from model data
wave_pair_counts = unlist(lapply(split(model_data_reduced, model_data_reduced$wave.iid), function(x){dim(x)[1]}))
success = aggregate(model_data_reduced$match.iid, by=list(model_data_reduced$wave.pid), sum)
success_by_wave = cbind(wave = success[,1], success = success[, 2], rate = success[, "x"]/wave_pair_counts)
success_failure_table = t(matrix(unlist(lapply(split(model_data_reduced, model_data_reduced$wave.iid), function(x){table(x$match.iid)})), nrow=2))
success_failure_table = cbind(c(1, 2, 3, 4, 10, 11, 15, 16, 17), success_failure_table)
colnames(success_failure_table) = c("wave", "failure", "success")
final_table_list = list()
for (i in 1:dim(success_failure_table)[1]){
x = success_failure_table[i, ]
final_table_list[[i]] = cbind(rep(x[1], x[2] + x[3]), c(rep(1, x[3]), rep(0, x[2])))
}
final_table = as.data.frame(do.call(rbind.data.frame, final_table_list))
colnames(final_table) = c("wave", "success")
final_table$wave = as.factor(final_table$wave)
L = lm(success~wave, data=final_table)
summary(L)
M = aov(success ~ wave, data = final_table)
TukeyHSD(M)
plot(TukeyHSD(M))
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/back_up_difference_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/back_up_difference_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/back_up_difference_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/difference_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/sum_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/back_up_difference_model.R')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/back_up_difference_model.R')
