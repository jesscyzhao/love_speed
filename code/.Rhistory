raw_data = read.csv(RAW_DATA)
feature_select_data = read.csv(FEATURE_DATA)
result = choose.features(raw_data, feature_select_data)
result = choose.features(raw_data, feature_select_data)
summary_table
pair.and.combine = function(sample_data, summary_table, individual_feature, pair_wise_feature){
sample_data_by_wave = split(sample_data, sample_data$wave)
model_data = data.frame()
pair_counts = c()
for (i in 1:length(WAVE_LIST)){
this_group = sample_data_by_wave[[as.character(WAVE_LIST[WAVE_LIST[i]])]]
this_group_by_gender = split(this_group, this_group$gender)
A = this_group_by_gender$`0`[, individual_feature]
B = this_group_by_gender$`1`[, individual_feature]
B$pid=this_group_by_gender$`1`[, "iid"]
B$iid=this_group_by_gender$`1`[, "pid"]
combined = merge(A, B, by=c("iid", "pid"))
X = this_group_by_gender$`0`[, pair_wise_feature]
Y = this_group_by_gender$`1`[, pair_wise_feature]
Y$pid=this_group_by_gender$`1`[, "iid"]
Y$iid=this_group_by_gender$`1`[, "pid"]
X_sorted = X[with(X, order(X$iid, X$pid)), ]
Y_sorted = Y[with(Y, order(Y$iid, Y$pid)), ]
if (all(X_sorted$iid == Y_sorted$iid) & all(X_sorted$pid == Y_sorted$pid)){
iid = X_sorted$iid
pid = X_sorted$pid
XY_diff = cbind(iid, pid, X_sorted[, 3:length(pair_wise_feature)] - Y_sorted[, 3:length(pair_wise_feature)])
}
else{
print("iid and pid do not match for male and female")
stop()
}
combined = merge(combined, XY_diff, by=c("iid", "pid"))
pair_counts = c(pair_counts, dim(combined)[1])
model_data = rbind(model_data, combined)
}
summary_table= cbind(summary_table, pair_counts)
return(a = model_data, b = summary_table)
}
result = choose.features(raw_data, feature_select_data)
pair.and.combine = function(sample_data, summary_table, individual_feature, pair_wise_feature){
sample_data_by_wave = split(sample_data, sample_data$wave)
model_data = data.frame()
pair_counts = c()
for (i in 1:length(WAVE_LIST)){
this_group = sample_data_by_wave[[as.character(WAVE_LIST[WAVE_LIST[i]])]]
this_group_by_gender = split(this_group, this_group$gender)
A = this_group_by_gender$`0`[, individual_feature]
B = this_group_by_gender$`1`[, individual_feature]
B$pid=this_group_by_gender$`1`[, "iid"]
B$iid=this_group_by_gender$`1`[, "pid"]
combined = merge(A, B, by=c("iid", "pid"))
X = this_group_by_gender$`0`[, pair_wise_feature]
Y = this_group_by_gender$`1`[, pair_wise_feature]
Y$pid=this_group_by_gender$`1`[, "iid"]
Y$iid=this_group_by_gender$`1`[, "pid"]
X_sorted = X[with(X, order(X$iid, X$pid)), ]
Y_sorted = Y[with(Y, order(Y$iid, Y$pid)), ]
if (all(X_sorted$iid == Y_sorted$iid) & all(X_sorted$pid == Y_sorted$pid)){
iid = X_sorted$iid
pid = X_sorted$pid
XY_diff = cbind(iid, pid, X_sorted[, 3:length(pair_wise_feature)] - Y_sorted[, 3:length(pair_wise_feature)])
}
else{
print("iid and pid do not match for male and female")
stop()
}
combined = merge(combined, XY_diff, by=c("iid", "pid"))
pair_counts = c(pair_counts, dim(combined)[1])
model_data = rbind(model_data, combined)
}
summary_table= cbind(summary_table, pair_counts)
return(list(a = model_data, b = summary_table))
}
result = choose.features(raw_data, feature_select_data)
result = pair.and.combine(sample_data, summary_table, individual_feature, pair_wise_feature)
raw_data = read.csv(RAW_DATA)
feature_select_data = read.csv(FEATURE_DATA)
total_cols = colnames(raw_data)
select_cols = feature_select_data$raw_col
sample_data = raw_data[which(raw_data$wave %in% WAVE_LIST), total_cols %in% select_cols]
print(colnames(sample_data))
print(feature_select_data$new_col)
colnames(sample_data) = feature_select_data$new_col
sample_group = unlist(lapply(split(sample_data, sample_data$gender), function(x){split(x, x$wave)}), recursive = FALSE)
counts = unlist(lapply(sample_group, function(x){length(unique(x$iid))}))
summary_table = matrix(counts, ncol=2)
individual_feature = as.character(feature_select_data[which(feature_select_data$ind==1),"new_col"])
pair_wise_feature = as.character(feature_select_data[which(feature_select_data$pair==1), "new_col"])
result = pair.and.combine(sample_data, summary_table, individual_feature, pair_wise_feature)
summary_table = result[[b]]
length(result)
names(result)
summary_table = result$summary
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/data_processing.r')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/data_processing.r')
dim(model_data)
summary_table
dim_sample_data
dim(sample_data)
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/data_processing.r')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/data_processing.r')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/data_processing.r')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/data_processing.r')
summary(M_reduced)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=6, fig.height=4)
library(ISwR)
data("tb.dilute")
head(tb.dilute)
attach(tb.dilute)
levels(logdose)
levels(animal)
L = lm(reaction ~ animal + logdose, data=tb.dilute)
summary(L)
M = aov(reaction ~ animal + logdose, data=tb.dilute)
summary(M)
plot(L$residuals~L$fitted.values)
abline(h=0)
qqnorm(L$residuals)
qqline(L$residuals)
model.tables(M, cterms="logdose")
model.tables(M, cterms="logdose", type="mean")
model.tables(M, cterms="animal")
model.tables(M, cterms="animal", type="mean")
TukeyHSD(M)
plot(TukeyHSD(M), cex.axis=0.7)
boxplot(reaction ~ animal)
head(vitcap2)
vitcap2_all_factor = vitcap2
vitcap2_all_factor$group = as.factor(vitcap2$group)
vitcap2_all_factor$age = as.factor(vitcap2$age)
str(vitcap2)
M = aov(vital.capacity~age + group, data=vitcap2_all_factor)
summary(M)
M1 = aov(vital.capacity ~ age, data=vitcap2_all_factor)
summary(M1)
vitcap2_mix = vitcap2
vitcap2_mix$group = as.factor(vitcap2_mix$group)
L = lm(vital.capacity ~ age + group, data = vitcap2_mix)
summary(L)
AIC(L)
AIC(M)
AIC(L) == AIC(M)
L1 = lm(vital.capacity ~ age, data = vitcap2_mix)
summary(L1)
anova(L1, L)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=6, fig.height=4)
M = glm(mal ~ age + log(ab), data=malaria, family = binomial("logit"))
library(ISwR)
# 3.use logistic regression on malaria
```{r}
library(ISwR)
data(malaria)
M = glm(mal ~ age + log(ab), data=malaria, family = binomial("logit"))
summary(M)
M1 = glm(mal ~ log(ab), data = malaria, family = binomial("logit"))
summary(M1)
anova(M1)
anova(M)
anova(M, test = "Chisq")
anova(M1,  test = "Chisq")
anova(M, M1, test="F")
anova(M, M1, test="Chisq")
anova(M1, M, test="Chisq")
gvhdlm1=glm(gvhd~rcpage+donage+time+log(index)+preg, family=binomial, data=ISwR::graft.vs.host)
summary(gvhdlm1)
gvhdlm3.2=glm(gvhd~rcpage+time+eindex, family=binomial, data=ISwR::graft.vs.host)
data(graft.vs.host)
head(graft.vs.host)
summary(graft.vs.host)
dim(graft.vs.host)
plot(jitter(gvhd, 0.2)~index, data = graft.vs.host)
gvhd=ISwR::graft.vs.host$gvhd
index=ISwR::graft.vs.host$index
eindex=exp(index)
gvhdlm1=glm(gvhd~rcpage+donage+time+log(index)+preg, family=binomial, data=ISwR::graft.vs.host)
summary(gvhdlm1)
gvhdlm1.1=glm(gvhd~time+log(index), family=binomial, data=ISwR::graft.vs.host)
summary(gvhdlm1.1)
gvhdlm2=glm(gvhd~rcpage+donage+time+index+I(index^2)+preg, family=binomial, data=ISwR::graft.vs.host)
summary(gvhdlm2)
gvhdlm3=glm(gvhd~rcpage+donage+time+eindex+preg, family=binomial, data=ISwR::graft.vs.host)
summary(gvhdlm3)
gvhdlm3.1=glm(gvhd~rcpage+time+eindex+preg, family=binomial, data=ISwR::graft.vs.host)
summary(gvhdlm3.1)
gvhdlm3.2=glm(gvhd~rcpage+time+eindex, family=binomial, data=ISwR::graft.vs.host)
summary(gvhdlm3.2)
summary(M1)
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.r')
tables = list(1)
table_assingment = list(1)
head_counts = sapply(table_assingment, length)
table_id = 1
tables = c(table_id)
current_rate = function(table_assingment, alpha){
head_counts = sapply(table_assingment, length)
rate = c(head_counts, alpha)/sum(head_counts, alpha)
return(rate)
}
table_i = sample(c(tables, table+1), current_rate)
table_i = sample(c(tables, table_id+1), current_rate)
table_id
?sample
table_i = sample(c(tables, table_id+1), 1,  prob=current_rate)
current_rate
table_i = sample(c(tables, table_id+1), 1,  prob=current_rate(table_assingment, ALPHA))
table_i
seating_prob = get.seating.prob(table_assingment, ALPHA)
# Total number of iterations
N = 100
# Hyper parameters for the normal distibution that generates the cluster center
MU_0 = cbind(0, 0)
SIGMA_0 = cbind(1.5, 1.5)
# Hyper parameter for the variance in each individual Gaussian
sigma = 0.3
# Hyper parameters for GEM
ALPHA = 2
table_assingment = list(1)
table_id = 1
tables = c(table_id)
get.seating.prob = function(table_assingment, alpha){
head_counts = sapply(table_assingment, length)
rate = c(head_counts, alpha)/sum(head_counts, alpha)
return(rate)
}
for (i in 2:N){
seating_prob = get.seating.prob(table_assingment, ALPHA)
table_i = sample(c(tables, table_id+1), 1,  prob=seating_prob)
}
table_i
seating_prob = get.seating.prob(table_assingment, ALPHA)
seating_prob
alpha
ALPHA
head_counts = sapply(table_assingment, length)
head_counts
for (i in 2:N){
seating_prob = get.seating.prob(table_assingment, ALPHA)
table_i = sample(c(tables, table_id+1), 1,  prob=seating_prob)
if(table_i == (table_id+1)){
table_id = table_id + 1
tables = c(tables, table_id)
}
table_assingment[[table_i]] = c(table_assingment[[table_i]], i)
}
table_assingment
table_assingment[[2]] = 1
table_assingment
table_i
table_assingment[[table_i]]
table_i = 3
table_assingment[[table_i]]
table_assingment[[table_i]] = 3
if(1>0) 2 else -
)
if(1>0) 2 else 0
table_assingment[[table_i]] = if (table_i == (table_id+1)) i else c(table_assingment[[table_i]], i)
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.R')
i = 2
seating_prob = get.seating.prob(table_assingment, ALPHA)
table_assingment = list(1)
i = 2
seating_prob = get.seating.prob(table_assingment, ALPHA)
table_i = sample(c(tables, table_id+1), 1,  prob=seating_prob)
# Total number of iterations
N = 100
# Hyper parameters for the normal distibution that generates the cluster center
MU_0 = cbind(0, 0)
SIGMA_0 = cbind(1.5, 1.5)
# Hyper parameter for the variance in each individual Gaussian
sigma = 0.3
# Hyper parameters for GEM
ALPHA = 2
table_assingment = list(1)
table_id = 1
tables = c(table_id)
get.seating.prob = function(table_assingment, alpha){
head_counts = sapply(table_assingment, length)
rate = c(head_counts, alpha)/sum(head_counts, alpha)
return(rate)
}
i = 2
seating_prob = get.seating.prob(table_assingment, ALPHA)
table_i = sample(c(tables, table_id+1), 1,  prob=seating_prob)
table_i
if(table_i == (table_id+1)){
table_id = table_id + 1
tables = c(tables, table_id)
}
table_id
tables
table_assingment
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.R')
table_assingment
length(unlist(table_assingment))
rnorm(cbind(1,1), mu_0, sigma_0)
# Hyper parameters for the normal distibution that generates the cluster center
mu_0 = cbind(0, 0)
sigma_0 = cbind(1.5, 1.5)
rnorm(cbind(1,1), mu_0, sigma_0)
rnorm(cbind(rep(1,5),rep(1, 5)), mu_0, sigma_0)
cbind(rep(1,5),rep(1, 5))
replicate(rnorm(cbind(1,1), mu_0, sigma_0), length(table_assingment))
replicate
?replicate
mu_vec = replicate(length(table_assingment), rnorm(cbind(1,1), mu_0, sigma_0))
muv_vec
mu_vec
rnorm(cbind(1,1), mu_0, sigma_0)
mu_vec = t(replicate(length(table_assingment), rnorm(cbind(1,1), mu_0, sigma_0)))
mu_vec
mu = lapply(list(rep(0,length(table_assingment))), rnorm(cbind(1,1), mu_0, sigma_0)))
mu = lapply(list(rep(0,length(table_assingment))), rnorm(cbind(1,1), mu_0, sigma_0))
mu = lapply(list(rep(0,length(table_assingment))), rnorm, cbind(1,1), mu_0, sigma_0)
mu = lapply(list(rep(0,length(table_assingment))), function(x){rnorm(cbind(1,1), mu_0, sigma_0)})
mu
rep(0,length(table_assingment)
list(rep(0,length(table_assingment)))
list(rep(0,length(table_assingment)))
replicate(list(), 8)
replicate(8, )
replicate(8, list)
mu = lapply(replicate(length(table_assingment), list), function(x){rnorm(cbind(1,1), mu_0, sigma_0)})
mu
simulate.one.cluster = function(table_assingment_i, mu_i, sigma){
data_points = replicate(length(table_assingment_i), rnorm(cbind(1,1), mu_i, sigma))
return(cbind(table_assingment_i, data_points))
}
sim_data_list = lapply(replicate(length(table_assingment), list), function(x){simulate.one.cluster(table_assingment[[x]], mu[[x]], sigma)})
sim_data_list = lapply(replicate(length(table_assingment), list), function(x){simulate.one.cluster(x)}, c(table_assingment, mu, simga) )
sim_data_list = lapply(replicate(length(table_assingment), list), function(x){simulate.one.cluster(x)}, c(table_assingment, mu, sigma) )
sim_data_list = lapply(replicate(length(table_assingment), list), function(x){simulate.one.cluster(x)}, table_assingment = table_assingment,mu= mu, sigma=sigma) )
sim_data_list = lapply(replicate(length(table_assingment), list), function(x){simulate.one.cluster(x)}, table_assingment = table_assingment,mu= mu, sigma=sigma)
sim_data_list = lapply(replicate(length(table_assingment), list), simulate.one.cluster, table_assingment = table_assingment,mu= mu, sigma=sigma)
simulate.one.cluster = function(i, table_assingment, mu, sigma){
data_points = replicate(length(table_assingment[[i]]), rnorm(cbind(1,1), mu[[i]], sigma))
return(cbind(table_assingment[[i]], data_points))
}
sim_data_list = lapply(replicate(length(table_assingment), list), simulate.one.cluster, table_assingment = table_assingment,mu= mu, sigma=sigma)
sim_data_list = lapply(replicate(length(table_assingment), list), simulate.one.cluster, table_assingment = table_assingment,mu= mu, sigma=sigma)
sim_data_list = lapply(1:length(table_assingment), simulate.one.cluster, table_assingment = table_assingment,mu= mu, sigma=sigma)
sim_data_list
simulate.one.cluster = function(i, table_assingment, mu, sigma){
data_points = t(replicate(length(table_assingment[[i]]), rnorm(cbind(1,1), mu[[i]], sigma)))
return(cbind(table_assingment[[i]], data_points))
}
sim_data_list = lapply(1:length(table_assingment), simulate.one.cluster, table_assingment = table_assingment,mu= mu, sigma=sigma)
sim_data_list
sim_data = unlist(sim_data_list, recursive = FALSE)
sim_data
sim_data = unlist(sim_data_list, recursive = TRUE)
sim_data
unlist(sim_data_list, recursive = FALSE)
unlist(sim_data_list, recursive = FALSE, use.names = TRUE)
unlist(sim_data_list, recursive = FALSE, use.names = FALSE)
sim_data_list
as.matrix(sim_data_list)
return(as.data.frame(cbind(table_assingment[[i]], data_points)))
simulate.one.cluster = function(i, table_assingment, mu, sigma){
data_points = t(replicate(length(table_assingment[[i]]), rnorm(cbind(1,1), mu[[i]], sigma)))
return(as.data.frame(cbind(table_assingment[[i]], data_points)))
}
sim_data_list = lapply(1:length(table_assingment), simulate.one.cluster, table_assingment = table_assingment,mu= mu, sigma=sigma)
sim_data = unlist(sim_data_list, recursive = FALSE)
sim_data
sim_data = unlist(sim_data_list, recursive = TRUE)
sim_data
data_points = t(replicate(length(table_assingment[[i]]), rnorm(cbind(1,1), mu[[i]], sigma)))
return(cbind(table_assingment[[i]], data_points))
data_points = t(replicate(length(table_assingment[[i]]), rnorm(cbind(1,1), mu[[i]], sigma)))
simulate.one.cluster = function(i, table_assingment, mu, sigma){
data_points = t(replicate(length(table_assingment[[i]]), rnorm(cbind(1,1), mu[[i]], sigma)))
return(cbind(table_assingment[[i]], data_points))
}
sim_data_list = lapply(1:length(table_assingment), simulate.one.cluster, table_assingment = table_assingment,mu= mu, sigma=sigma)
sim_data = unlist(sim_data_list, recursive = TRUE)
sim_data = matrix(unlist(sim_data_list, recursive = TRUE), nrow=n)
sim_data = matrix(unlist(sim_data_list, recursive = TRUE), nrow=N)
sim_data
sim_data_list
unlist(sim_data_list)
unlist(sim_data_list, recursive = TRUE)
sim_data = matrix(unlist(sim_data_list), nrow=N, byrow=TRUE)
sim_data
sim_data = do.call(rbind, lapply(z, matrix, nrow=N, byrow=TRUE))
sim_data = do.call(rbind, lapply(sim_data_list, matrix, nrow=N, byrow=TRUE))
sim_data
sim_data = do.call(rbind, sim_data_list)
sim_data
rbind(sim_data_list)
simulate.one.cluster = function(i, table_assingment, mu, sigma){
data_points = t(replicate(length(table_assingment[[i]]), rnorm(cbind(1,1), mu[[i]], sigma)))
return(cbind(table_assingment[[i]], rep(i, length(table_assingment[[i]])) data_points))
}
simulate.one.cluster = function(i, table_assingment, mu, sigma){
data_points = t(replicate(length(table_assingment[[i]]), rnorm(cbind(1,1), mu[[i]], sigma)))
return(cbind(table_assingment[[i]], rep(i, length(table_assingment[[i]])) data_points))
}
return(cbind(table_assingment[[i]], rep(i, length(table_assingment[[i]])), data_points))
simulate.one.cluster = function(i, table_assingment, mu, sigma){
data_points = t(replicate(length(table_assingment[[i]]), rnorm(cbind(1,1), mu[[i]], sigma)))
return(cbind(table_assingment[[i]], rep(i, length(table_assingment[[i]])), data_points))
}
sim_data_list = lapply(1:length(table_assingment), simulate.one.cluster, table_assingment = table_assingment,mu= mu, sigma=sigma)
sim_data = do.call(rbind, sim_data_list)
sim_data
rbind(replicate(num_data, list(this_mu)))
table_assingment
i = 1
num_data = length(table_assingment[[i]])
this_mu = mu[[i]]
data_points = t(replicate(num_data, rnorm(cbind(1,1), this_mu, sigma)))
rbind(replicate(num_data, list(this_mu)))
rbind(replicate(num_data, list(as.matrix(this_mu))))
return(cbind(table_assingment[[i]], rep(i, num_data), rbind(replicate(num_data, list(as.matrix(this_mu, ncol=2)))), data_points))
rbind(replicate(num_data, list(as.matrix(this_mu, ncol=2))))
replicate(num_data, list(as.matrix(this_mu, ncol=2)))
this_mu
matrix(this_mu, ncol=2)
rbind(replicate(num_data, list(matrix(this_mu, ncol=2))))
replicate(num_data, list(matrix(this_mu, ncol=2)))
this_mu_matrix = matrix(rep(this_mu, num_data), nrow=num_data)
this_mu_matrix
rep(this_mu, num_data)
this_mu_matrix = t(matrix(rep(this_mu, num_data), ncol=num_data))
this_mu_matrix
simulate.one.cluster = function(i, table_assingment, mu, sigma){
num_data = length(table_assingment[[i]])
this_mu = mu[[i]]
data_points = t(replicate(num_data, rnorm(cbind(1,1), this_mu, sigma)))
this_mu_matrix = t(matrix(rep(this_mu, num_data), ncol=num_data))
return(cbind(table_assingment[[i]], rep(i, num_data), this_mu_matrix, data_points))
}
sim_data_list = lapply(1:length(table_assingment), simulate.one.cluster, table_assingment = table_assingment,mu= mu, sigma=sigma)
sim_data = do.call(rbind, sim_data_list)
sim_data
colnames(sim_data) = c("id", "cluster", "mu", "data_x", "data_y")
colnames(sim_data) = c("id", "cluster", "mu_x","mu_y", "data_x", "data_y")
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_demo.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_demo.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_demo.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_demo.r')
barplot(c(1,2,3, 4))
barplot(c(1,2,3, 4), horiz)
barplot(c(1,2,3, 4), horiz=TRUE)
barplot(cbind(1,2,3, 4), horiz=TRUE)
barplot(c(1,2,3, 4), horiz=TRUE)
barplot(c(1,2,3, 4), horiz=TRUE, col=c("grey", "grey", "grey", "grey"))
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_demo.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_demo.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_demo.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_demo.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_demo.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_demo.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_demo.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_demo.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_demo.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_demo.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_demo.r')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_demo.r')
cpr.generate.data()
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.R')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.R')
data
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.R')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.R')
source('C:/Users/Chunyi Zhao/Projects/dmpp/dmpp_simulation.R')
data
require(ggplot2)
CUR_DIC = getwd()
setwd("..")
PARENT_DIC = getwd()
setwd(CUR_DIC)
require(ggthemes)
DATA_DIC = paste(PARENT_DIC, "/data/", sep="")
DATA_SUB_DIC = paste(DATA_DIC, "/toy_data_11_25/", sep="")
OUTPUT_DIC = paste(PARENT_DIC, "/output/test_toy_data_11_25", sep="")
FEATURE_DATA = paste(DATA_DIC, "feature_select.csv", sep="")
MODEL_DATA = paste(DATA_SUB_DIC, "TEST_MODEL.csv", sep="")
SAMPLE_DATA = paste(DATA_SUB_DIC, "TEST_SAMPLE.csv", sep="")
model_data = read.csv(MODEL_DATA)
DATA_DIC = paste(PARENT_DIC, "/data", sep="")
DATA_SUB_DIC = paste(DATA_DIC, "/toy_data_11_25/", sep="")
OUTPUT_DIC = paste(PARENT_DIC, "/output/test_toy_data_11_25", sep="")
FEATURE_DATA = paste(DATA_DIC, "feature_select.csv", sep="")
MODEL_DATA = paste(DATA_SUB_DIC, "TEST_MODEL.csv", sep="")
SAMPLE_DATA = paste(DATA_SUB_DIC, "TEST_SAMPLE.csv", sep="")
model_data = read.csv(MODEL_DATA)
sample_data = read.csv(SAMPLE_DATA)
require(ggplot2)
require(ggthemes)
CUR_DIC = getwd()
CUR_DIC
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/data_exploratory.r')
source('C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code/data_processing.r')
)
qt(0.975, df=(50+131-2))
setwd("C:/Users/Chunyi Zhao/Projects/AMS204/love_speed/code")
